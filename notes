#!/bin/bash

set -e

# Version number
VERSION="2.1.1"

# Name of file currently run
FILE="${0##*/}"

# Change this to your wanted directory
NOTES_DIR="/home/sasha/Documents/Notes/"

# returns String with examples on how to use programme
examples() {
cat << EOF
Examples:
    # This does goes to \$NOTES_DIR/Year3/Sem1/CompArch2 and lists directory 
    ${FILE%.*} -y 3 -s 1 -d CompArch2 -l 

    # This does goes to \$NOTES_DIR/Year3/Sem1/CompArch2 and makes pdf called lecture 7 
    ${FILE%.*} -y 3 -s 1 -d CompArch2 -p lecture7 

    # This does goes to \$NOTES_DIR/Year3/Sem1/CompArch2 and makes pdf called lecture 7 and opens it
    ${FILE%.*} -y 3 -s 1 -d CompArch2 -p lecture7 -o

    # This does goes to \$NOTES_DIR/Year3/Sem1/CompArch2, lists directory and makes pdf called lecture 7 
    # Note, listing directory takes precedence over making pdf in all cases whether the -l flag comes after
    ${FILE%.*} -y 3 -s 1 -d CompArch2 -l -p lecture7 

    # This does goes to \$NOTES_DIR/Year3/Sem1 and lists directory
    ${FILE%.*} -y 3 -s 1 -l 
EOF
}

# returns String with helptext 
usage() {
cat << EOF
Markdown to LaTeX pdf script convertor using pandoc
It's main purpose is to compile singular or multiple markdown files to pdf
This allows for quick note taking and in future note reading 

Usage:
    ${FILE%.*}  [-y <year>] [-s <semester>] [-d <directory>] [-l] [-p <pdf name> &| -o]
    ${FILE%.*}  -h | -v | -l | -e

Options:
    -y enter year of course in NOTES_DIR e.g. -y 3 
    -s enter semester of course, may only be 1 or 2 if out of range, flag ignored 
    -d use directory within NOTES_DIR or absoulte directory to compile pdf
    -p name of pdf (without extension .pdf) 
    -o open newely created pdf
    -h print helptext
    -v print version 
    -l list current directory 
    -e output examples on how to run programme 

Notes:
    Make sure to change the NOTES_DIR variable to suit your directory
    All markdown files will be sorted based on "> Date dd-mm-yyyy" which 
    are expected to be somewhere in the file. This will be later used to compile to LaTeX
EOF
}

# returns String with version information
version() {
cat << EOF
${FILE%.*} $VERSION

Written by Alexander Sepelenco
EOF
}

# returns void, compiles files to LaTeX specified in the String getnotes 
makepdf() {
    pandoc -s -f markdown -t latex --toc $(getnotes) -o $1.pdf
}

# returns a String files, separated with spaces
# Ordered with "> Date: dd-mm-yyyy" found inside the files
getnotes() {
    for file in *.md; do
        echo "`grep "> Date: [0-3][0-9]-[0-1][0-9]-[0-9][0-9][0-9][0-9]" $file` $file"
    done | \
    sort -n -t "-" -k3 -k2 -k1 | \
    awk '{print $5}' 
}

# Param $1 - String
# Return boolean 
isDirectory() {
    [[ -d "$1" ]] && echo 1 || echo 0
}

# Parm $1 - num :: String 
# Enter Document
# Return boolean 
isNum() {
    regNum="^[0-9]+$" # regular expression Number
    [[ $1 =~ $regNum ]] && echo 1 || echo 0
    unset regNum
}

# Param $1 - directory:: String 
# Return void
enterDirectory() {
    [[ $(isDirectory "$1") == 1 ]] && cd $2$1 || echo "Error, directory $1 does not exist"
}

# returns void
main() {
    [[ -z "$1" ]] && echo -e "Command not found\nTry '${FILE%.*} -h' for more information."    
    while getopts y:d:s:p:olhve flag
    do
        case "${flag}" in
            y) y=${OPTARG};;
            d) d=${OPTARG};;
            s) s=${OPTARG};;
            p) p=${OPTARG};;
            o) o="open";;
            l) l="list";;
            h) usage ; exit 0;;
            v) version ; exit 0;;
            e) examples ; exit 0;;
        esac
    done
    cd $NOTES_DIR
    if [[ $(isNum "$y") == 1 ]]; then 
        enterDirectory "Year$y"
    elif [[ $y != "" ]]; then
        echo "Error the $y flag must be specified as a number"
    fi
    if [[ $(isNum "$s") == 1 ]]; then
        enterDirectory "Sem$s"
    elif [[ $s != "" ]]; then 
        echo "Error the $s flag must be specified as a number"
    fi 
    if [[ $d != "" ]]; then
        enterDirectory "$d"
    fi
    [[ $l == "list" ]] && ls --color
    if [[ $p != "" ]]; then
         makepdf $p
         [[ $o == "open" ]] && zathura $p.pdf &
    fi
    unset y d p s l o
}

# envokes main
main "$@" # equivalent to main $1 $2 ...
