#!/bin/bash

set -e

# Version number
VERSION="4.0.3"

# Name of file currently run with extension
EXFILE="${0##*/}"

# Name of file without extension
FILE="${EXFILE%.*}"

# Name of file editor
EDITOR="vim"

# Name of pdf viewer
PDFVIEWER="zathura"

# Change this to your wanted directory
NOTES_DIR="$HOME/Documents/Notes/"

# returns String with examples on how to use programme
examples() {
cat << EOF
Examples:
    # This goes to \$NOTES_DIR/Year3/Sem1/CompArch2 and lists directory 
    $FILE -y Year3 -s Sem1 -d CompArch2 -l 

    # This goes to \$NOTES_DIR/Year3/Sem1/CompArch2 and makes pdf called lecture 7 
    $FILE -y Year3 -s Sem1 -d CompArch2 -p lecture7  

    # This goes to \$NOTES_DIR/Year3/Sem1/CompArch2 and makes pdf called lecture 7 and opens it
    $FILE -y Year3 -s Sem1 -d CompArch2 -p lecture7 -o

    # This goes to \$NOTES_DIR/Year3/Sem1/CompArch2, lists directory and makes pdf called lecture 7 and opens it
    # Note, listing directory takes precedence over making pdf in all cases whether the -l flag comes after
    $FILE -y Year3 -s Sem1 -d CompArch2 -l -p lecture7 -O lecture7

    # This goes to \$NOTES_DIR/Year3/Sem1 and lists directory
    $FILE -y Year3 -s Sem1 -l 

    # This goes to \$NOTES_DIR/Year3/Sem1/CompArch2 and opens a samples.pdf file that is assumed to exist
    $FILE -y Year3 -s Sem1 -d CompArch2 -O mypdf

    # This goes to \$NOTES_DIR/Year3/Sem1/CompArch2 and opens a lecture.pdf file that is assumed to exist and begins
    # editing a file called lecture2.md
    $FILE -yYear3 -sSem1 -dComArch2 -w lecture2.md -p lecture -o
    
    # This goes to \$NOTES_DIR/Year3/Sem1/CompArch2 and deletes the file lecture.md 
    $FILE -yYear3 -sSem1 -dComArch2 -r lecture2.md 
EOF
}

# returns String with helptext 
usage() {
cat << EOF
Markdown to LaTeX pdf script convertor using pandoc
It's main purpose is to compile singular or multiple markdown files to pdf
This allows for quick note taking and in future note reading

Usage:
    $FILE  [-y <year>] [-s <semester>] [-d <directory>] [-l] [-w] [-r] [-p <pdf name> &| -o] [-O <pdf name>]
    $FILE  -h | -v | -l | -e

Options:
    -y enter year of course e.g. Year3
    -s enter semester of course e.g. Sem1
    -d use directory within NOTES_DIR or absoulte directory to compile pdf
    -p name of pdf (without extension .pdf) 
    -o open newely created pdf 
    -O open pdf (with extension)
    -w Write a file, if file exists will open file (with extension)
    -r Remove a file (with extension)
    -h print helptext
    -v print version 
    -l list current directory 
    -e output examples on how to run programme 

Notes:
    Make sure to change the NOTES_DIR variable to suit your directory
    All markdown files will be sorted based on "> Date: dd-mm-yyyy \" which 
    is expected to be somewhere in the file. This will be later used to compile to LaTeX
EOF
}

# returns String with version information
version() {
cat << EOF
$FILE $VERSION

Written by Alexander Sepelenco A.K.A Silent
Github: https://github.com/alexandersep
For bug reports please create an issue at https://github.com/alexandersep/notes.git
EOF
}

# returns void, compiles files to LaTeX specified in the String getnotes 
makepdf() {
    pandoc -s -f markdown -t latex --toc $(getnotes) -o $1.pdf
}

# returns a String files, separated by line 
getnotes() {
    # Ordered with "> Date: dd-mm-yyyy \" found inside the files
    for file in *.md; do
        command=`grep "> Date: [0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]" $file`
        echo "$command $file"
    done | \
    sort -n -t "-" -k3 -k2 -k1 | \
    awk '{print $5}'

    # Is not ordered, Since the date was not specified correctly 
    # All unordered files will show up after ordered files in the latex pdf 
    for file in *.md; do
        command=`grep -L "> Date: [0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]" $file`
        [[ -z $command ]] || echo "$file"
    done 
    unset command
}

# Param $1 - potentialDirectory :: String
# Return Boolean 
isDirectory() {
    [[ -d "$1" ]] && echo 1 || echo 0
}

# Param $1 - directory :: String 
# Return void
enterDirectory() {
    [[ $(isDirectory "$1") == 1 ]] && cd $1 || echo "Error, directory $1 does not exist"
}

# returns void
main() {
    [[ -z "$1" ]] && echo -e "Command not found\nTry '$FILE -h' for more information." && exit 1
    while getopts y:d:s:p:O:w:r:olhve flag
    do
        case "${flag}" in
            y) y=${OPTARG};;
            d) d=${OPTARG};;
            s) s=${OPTARG};;
            p) p=${OPTARG};;
            O) O=${OPTARG};;
            w) w=${OPTARG};;
            r) r=${OPTARG};;
            o) o="o";;
            l) l="l";;
            h) usage ; exit 0;;
            v) version ; exit 0;;
            e) examples ; exit 0;;
        esac
    done
    cd $NOTES_DIR
    [[ $r != "" ]] && rm $r
    [[ $y != "" ]] && enterDirectory $y
    [[ $s != "" ]] && enterDirectory "$s" 
    [[ $d != "" ]] && enterDirectory "$d"
    [[ $l == "l" ]] && ls 
    [[ $p != "" ]] && makepdf $p && [[ $o == "o" ]] && $PDFVIEWER $p.pdf &
    [[ $O != "" ]] && $PDFVIEWER $O &
    [[ $w != "" ]] && $EDITOR $w
    unset y d s p l o O w r
}

# evokes main
main "$@" # equivalent to main $1 $2 ...
